// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String    @id @default(uuid()) @db.VarChar(36)
  firstName     String
  lastName      String
  email         String    @unique
  password      String 
  admin         Boolean   
  
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime  @updatedAt

  refreshToken RefreshToken[]
  bookedBooks BookedBooks[]
}

model RefreshToken {
  id            String   @id @default(uuid()) @db.VarChar(36)
  token String           @unique

  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime  @updatedAt

  userId String   @default(uuid()) @db.VarChar(36)
  user Users @relation(fields:[userId], references: [id])
}

model Books {
  id String     @id        @default(uuid()) @db.VarChar(36)

  author        Authors?    @relation(fields: [authorId], references: [id])
  authorId      String?

  publisher     Publishers? @relation(fields: [publisherId], references: [id])
  publisherId   String?

  title         String
  coverImage    String?

  ISBN String?
  year String?
  info String?
  theme String?

  created_at    DateTime   @default(now()) @db.Timestamp
  updated_at    DateTime   @updatedAt

  LibraryBook LibraryBook[]
}

model LibraryBook {
  id        String    @id @default(uuid()) @db.VarChar(36)

  book      Books     @relation(fields: [bookId], references: [id])
  bookId    String

  library   Libraries @relation(fields: [libraryId], references: [id])
  libraryId String

  amount Int
  amountAvailable Int

  bookedBook BookedBooks[]

  created_at    DateTime   @default(now()) @db.Timestamp
  updated_at    DateTime   @updatedAt
}

model Authors {
  id   String    @id @default(uuid()) @db.VarChar(36)
  name String
  info String?

  books Books[]
}

model Publishers {
  id   String    @id @default(uuid()) @db.VarChar(36)
  name String
  info String?

  books Books[]
}

model Libraries {
  id       String  @id @default(uuid()) @db.VarChar(36)
  name     String
  info     String?
  Address  String
  latitude Float
  longitude Float

  LibraryBook LibraryBook[]
}

model BookedBooks {
  id             String     @id @default(uuid()) @db.VarChar(36)

  libraryBook    LibraryBook  @relation(fields: [libraryBookId], references: [id])
  libraryBookId  String

  user           Users        @relation(fields: [userId], references: [id])
  userId         String       @default(uuid()) @db.VarChar(36)

  received       Boolean
  orderCode      String

  created_at     DateTime   @default(now()) @db.Timestamptz(0)
  updated_at     DateTime   @updatedAt @db.Timestamptz(0)

  received_at    DateTime?  @db.Timestamptz(0) // Дата получения книги
  due_date       DateTime?  @db.Timestamptz(0) // Дата, когда книгу нужно вернуть
  booked_due_date   DateTime?  @db.Timestamptz(0) // Дата возврата книги

}